{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","black","document","body","style","color","themeColor","className","mode","href","title","type","id","aboutTitle","role","onClick","toggleMode","htmlFor","modeText","backgroundColor","Textform","useState","text","setText","theme","heading","value","onChange","event","console","log","target","placeholder","rows","newText","toUpperCase","showAlert","toLowerCase","word","str","split","newWord","i","length","lower","charAt","slice","capitalize","join","repeat","trim","getElementById","select","navigator","clipboard","writeText","filter","element","defaultProps","Alert","height","alert","msg","App","setTheme","setMode","setModeText","setAlert","message","setTimeout","themeName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c5b04397.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n\r\n  const blue = () =>{\r\n    props.themeColor(\"blue\");\r\n  }\r\n  const grey = () =>{\r\n    props.themeColor(\"grey\");\r\n  }\r\n  const green = () =>{\r\n    props.themeColor(\"green\");\r\n  }\r\n  const red = () =>{\r\n    props.themeColor(\"red\");\r\n  }\r\n  const yellow = () =>{\r\n    props.themeColor(\"yellow\");\r\n  }\r\n  const cyan = () =>{\r\n    props.themeColor(\"cyan\");\r\n  }\r\n  const black = () =>{\r\n    document.body.style.color = 'white';\r\n    props.themeColor(\"black\");\r\n  }\r\n  const white = () =>{\r\n    props.themeColor(\"white\");\r\n  }\r\n  const magenta = () =>{\r\n    props.themeColor(\"magenta\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\"  to=\"/\">Home</Link> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">{props.aboutTitle}</a>\r\n              {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutTitle}</Link> */}\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n          </form> */}\r\n\r\n          <div className={`form-check form-switch ${props.mode === `light` ? `text-dark`: `text-light`}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\"  role=\"switch\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"></input>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.modeText}</label>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </nav>\r\n\r\n  <div className=\"container color-palet\" >\r\n\r\n        <span className=\"badge rounded-pill bg-primary \" onClick= {blue} >B</span>\r\n        <span className=\"badge rounded-pill bg-secondary\" onClick= {grey} >G</span>\r\n        <span className=\"badge rounded-pill bg-success\" onClick= {green} >G</span>\r\n        <span className=\"badge rounded-pill bg-danger\" onClick= {red} >R</span>\r\n        <span className=\"badge rounded-pill bg-warning text-dark\" onClick= {yellow} >Y</span>\r\n        <span className=\"badge rounded-pill bg-info text-dark\" onClick= {cyan} >C</span>\r\n        <span className=\"badge rounded-pill text-light\" style={{backgroundColor:'magenta', color:black}} onClick= {magenta} >M</span>\r\n        <span className=\"badge rounded-pill bg-light text-dark\" onClick= {white} >W</span>\r\n        <span className=\"badge rounded-pill bg-dark\" onClick= {black}  >B</span>\r\n\r\n  </div>\r\n\r\n</>\r\n  )\r\n}       \r\n\r\n\r\nNavbar.propTypes = {\r\n   title :  PropTypes.string.isRequired,\r\n   aboutTitle :  PropTypes.string,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n   title :  'Set title here',\r\n   aboutTitle :  'About Text here',\r\n}","import React, {useState} from 'react'\r\n\r\n// change class to className \r\n// change for to htmlFor\r\n// close all the open tags or single closing tags by double tag\r\n\r\nexport default function Textform(props){\r\n    function capitalize(word) {\r\n        var str = word.split(\" \");\r\n        var newWord = \"\";\r\n        for (let i = 0; i < str.length; i++) {\r\n            const lower = str[i].toLowerCase();\r\n            newWord = newWord + str[i].charAt(0).toUpperCase() + lower.slice(1);\r\n            newWord = newWord + \" \";\r\n        }\r\n        return newWord;\r\n    }\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert('Text has been converted to Upper Case', 'info');\r\n    }\r\n    const handleCapitalizeClick = ()=>{\r\n        let newText = capitalize(text);\r\n        setText(newText);\r\n        props.showAlert('Text has been converted to Capitalize Text', 'info');\r\n    }\r\n    const handleLowClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert('Text has been converted to Lower Case', 'info');\r\n    }\r\n    const handleRepeatClick = ()=>{\r\n        let newText = text.repeat(2);\r\n        setText(newText);\r\n        props.showAlert('Text has been duplicated', 'info');\r\n    }\r\n    const handleExtraSpacesClick = ()=>{\r\n        // remove extra spaces\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert('Extra spaces has been removed', 'info');\r\n        \r\n    }\r\n    const handleTrimClick = ()=>{    \r\n        // this will remove extra spaces from the extremes only\r\n        let newText = text.trim();\r\n        setText(newText);\r\n        props.showAlert('Text has been Trimed', 'info');\r\n    }\r\n    const handleClearClick = ()=>{\r\n        let newText = \"\";\r\n        setText(newText);\r\n        props.showAlert('Textarea has been cleared', 'info');\r\n    }\r\n    const handleCopyClick = ()=>{\r\n        var text = document.getElementById(\"MyBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert('Text has been Copied to clipbooard', 'info');\r\n    }\r\n\r\n    const handleOnchange = (event)=>{\r\n        console.log(\"On change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState('Enter text here');\r\n    return(\r\n        <>\r\n        <div className=\"container\">\r\n            <h1 className={`${props.theme}`} > {props.heading} </h1>\r\n            {/* ${props.mode === `light` ? `text-dark`: `text-light`} */}\r\n\r\n            <div className={`form-floating  ${props.theme}`} >\r\n            {/* style={{ color:props.mode === 'dark'?'white':'black'}} */}\r\n\r\n                <textarea className={`form-control my-3`}  value = {text} onChange={handleOnchange}   placeholder=\"Leave a comment here\" id=\"MyBox\" rows=\"8\" ></textarea>\r\n                \r\n                {/*   className =>     ${props.theme} ${props.mode === `light`? `text-dark`: `text-light`} */}\r\n                {/* style={{backgroundColor:props.mode === 'dark'?'#032f52':'white', color:props.mode === 'dark'?'white':'black'}} */}\r\n\r\n\r\n                <label htmlFor=\"MyBox\" style={{color : 'black'}} >Comment</label>\r\n\r\n                <button className=\" btn btn-success m-2\" onClick = {handleUpClick}>Convert to upper case</button>\r\n                <button className=\" btn btn-success m-2\" onClick = {handleLowClick}>Convert to lower case</button>\r\n                <button className=\" btn btn-success m-2\" onClick = {handleCapitalizeClick}>Capitalize</button>\r\n                <button className=\" btn btn-success m-2\" onClick = {handleExtraSpacesClick}>Remove Extra Spaces</button>\r\n                <button className=\" btn btn-success m-2\" onClick = {handleRepeatClick}>Repeat</button>\r\n                <button className=\" btn btn-success m-2\" onClick = {handleTrimClick}>Trim</button>\r\n                <button className=\" btn btn-success m-2\" onClick = {handleCopyClick}>Copy</button>\r\n                <button className=\" btn btn-success m-2\" onClick = {handleClearClick}>Clear</button>\r\n            </div>\r\n        </div>\r\n        <div className={`container my-3 ${props.theme}`} >\r\n        {/* style={{ color:props.mode === 'dark'?'white':'black'}} */}\r\n            <h2>Text summary</h2>\r\n            <p>There are {text.split(\" \").filter((element)=>{return element.length!==0}).length} words and {text.length} characters.</p>\r\n            <p>{text.split(\" \").length * 0.008} minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p className=\"previewText\">{text.length>0?text:'Please enter something in textbox'}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n  return (\r\n    <div style={{height: '3.4rem'}}>\r\n    {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>  {capitalize( props.alert.type)} </strong> : {props.alert.msg} \r\n        {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n    </div>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\n// import About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import { render } from \"react-dom\";\n\n// import {\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [theme, setTheme] = useState('white');//check wheather the mode is light or dark\n  const [mode, setMode] = useState('light');//check wheather the mode is light or dark\n  const [modeText, setModeText] = useState('Enable Dark Mode');\n  const [alert, setAlert] =  useState(null);\n\n  const showAlert = (message, type)=>{\n      setAlert({\n        msg : message,\n        type : type\n      })\n      setTimeout(() => {\n        setAlert(null);\n      }, 2000);\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'dark'){\n      setMode('light');\n      setModeText('Enable Dark Mode');\n      showAlert('Dark Mode has been disabled', 'success');\n      document.body.style.backgroundColor = 'white';\n      // document.body.style.color = 'black';\n    }\n    else{\n      setMode(\"dark\");\n      setModeText('Disable Dark Mode');\n      showAlert('Dark Mode has been enabled', 'success');\n      document.body.style.backgroundColor = '#032f52';\n    }\n  }\n\n  const themeColor = (themeName)=>{\n    setTheme(themeName);\n    document.body.style.backgroundColor = themeName ;\n  }\n\n  return (\n    <>\n\n    <Navbar title=\"Textutils\" aboutTitle=\"About Textutils\"  mode={mode} modeText={modeText} toggleMode={toggleMode} themeColor={themeColor} />\n    <Alert alert={alert} />\n    <div className=\"container\">\n    \n    {/* <Routes>\n          \n      <Route path=\"/\" element={ */}\n      <Textform heading=\"Enter the text to analyse below\" showAlert={showAlert} mode={mode} alert={alert} theme={theme} />\n      {/* } >\n      </Route>\n            \n      <Route  path=\"/about\" element={<About heading=\"About Us\"/>}  >\n      </Route>\n                            \n    </Routes> */}\n\n    </div>\n\n  </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <BrowserRouter>\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n    </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}